---
- hosts: all
  become: yes
  vars:
    aws_python_bin: "/usr/bin/python3"
    aws_pip_bin: "/usr/bin/pip3"
  tasks:
    # Ubuntu/Debian (Azure)
    - name: Install Docker (Ubuntu/Debian)
      apt:
        name: docker.io
        state: present
        update_cache: yes
      when: ansible_facts['os_family'] == "Debian"

    # Amazon Linux 2 (AWS)
    - name: Install Docker (Amazon Linux 2)
      shell: |
        if [ -x /usr/bin/dnf ]; then
          dnf install -y docker
        else
          yum install -y docker
        fi
      args:
        creates: /usr/bin/docker
      when: ansible_facts['distribution'] == "Amazon"

    # Start and enable Docker on all
    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes

    # Ubuntu/Debian pip dependencies (Azure)
    - name: Install python3-pip (Ubuntu/Debian)
      apt:
        name: python3-pip
        state: present
      when: ansible_facts['os_family'] == "Debian"

    - name: Install python3-docker (Ubuntu/Debian)
      apt:
        name: python3-docker
        state: present
      when: ansible_facts['os_family'] == "Debian"

    # Amazon Linux pip dependencies (AWS)
    - name: Ensure python3.8 and pip3 are installed (Amazon Linux 2)
      shell: |
        amazon-linux-extras install epel -y
        yum install -y python38 python3-pip
        alternatives --set python3 /usr/bin/python3.8
      when: ansible_facts['distribution'] == "Amazon"

    - name: Install docker Python module with pip3 (Amazon Linux)
      shell: |
        {{ aws_pip_bin }} install --upgrade pip
        {{ aws_pip_bin }} install docker
      when: ansible_facts['distribution'] == "Amazon"

    # Only needed if using old Ansible on AWS (no harm leaving in)
    - name: Set Ansible python interpreter (Amazon Linux)
      set_fact:
        ansible_python_interpreter: "{{ aws_python_bin }}"
      when: ansible_facts['distribution'] == "Amazon"

    # DockerHub login
    - name: Login to DockerHub
      community.docker.docker_login:
        username: "sarojnayak1983"
        password: "{{ lookup('env', 'DOCKERHUB_PASSWORD') }}"

    - name: Stop previous container if running
      community.docker.docker_container:
        name: bankpro-app
        state: absent
        force_kill: yes

    - name: Remove old bankpro image (if any)
      community.docker.docker_image:
        name: "sarojnayak1983/bankpro"
        tag: latest
        state: absent

    - name: Pull image
      community.docker.docker_image:
        name: "sarojnayak1983/bankpro"
        tag: latest
        source: pull

    - name: Run container
      community.docker.docker_container:
        name: bankpro-app
        image: "sarojnayak1983/bankpro:latest"
        ports:
          - "8080:8080"
        state: started
        restart_policy: always

    - name: Print running containers
      shell: docker ps
      register: psout

    - name: Show running containers output
      debug:
        var: psout.stdout
